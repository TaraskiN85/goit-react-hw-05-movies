{"version":3,"file":"static/js/18.a1a635e9.chunk.js","mappings":"yRAEaA,E,OAAaC,GAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,qE,SC8CnC,EAtCiB,WACf,IAAAC,GAAgCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAArCI,EAAQF,EAAA,GAAEG,EAAWH,EAAA,GAC5BI,GAAkCL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAC9BG,GAAkCT,EAAAA,EAAAA,WAAS,GAAMU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAExBG,GAAUC,EAAAA,EAAAA,MAAYD,QAsB5B,OApBAE,EAAAA,EAAAA,YAAU,WAER,IAAMC,EAAS,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAF,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEI,OAFJF,EAAAC,KAAA,EAEdf,GAAa,GAAKc,EAAAE,KAAA,GACCC,EAAAA,EAAAA,IAAmBZ,GAAQ,OAAxCQ,EAAIC,EAAAI,KACVtB,EAAYiB,EAAKM,SACjBf,GAAa,GAAKU,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAM,GAAAN,EAAA,SAElBO,EAAAA,GAAAA,MAAYP,EAAAM,GAAME,SAClBtB,GAAa,GACbI,GAAa,GAAM,QAEA,OAFAU,EAAAC,KAAA,GAEnBf,GAAa,GAAMc,EAAAS,OAAA,6BAAAT,EAAAU,OAAA,GAAAZ,EAAA,wBAEtB,kBAbc,OAAAH,EAAAgB,MAAA,KAAAC,UAAA,KAeflB,EAAUH,EACZ,GAAG,CAACA,KAGFsB,EAAAA,EAAAA,MAACxC,EAAU,CAAAyC,SAAA,CACRjC,EAASkC,OAAS,EAAI1B,EAAYR,EAASmC,MAAM,EAAG,GAAGC,KAAI,SAAAC,GAC1D,OAAOC,EAAAA,EAAAA,KAACC,EAAAA,GAAW,CAAkBF,QAASA,GAArBA,EAAQG,GACnC,IAAK,GACJhC,EAAgC,IAApBR,EAASkC,OAAe,kCAAoC,GACxE9B,IAAakC,EAAAA,EAAAA,KAACG,EAAAA,EAAM,MAG3B,C","sources":["components/Comments/Comments.styled.js","components/Comments/Comments.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const StyledList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 36px;\n`;\n","import React, { useState, useEffect } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { toast } from 'react-toastify';\n\nimport { CommentItem } from 'components';\nimport { Loader } from 'helpers/Loader/Loader';\n\nimport { fetchMovieComments } from 'services/api';\nimport { StyledList } from './Comments.styled';\n\nconst Comments = () => {\n  const [comments, setComments] = useState([]);\n  const [isLoading, setIsLoading] = useState(false)\n  const [isSuccess, setIsSuccess] = useState(false)\n\n  const movieId = useParams().movieId;\n  \n  useEffect(() => {\n\n    const fetchData = async () => {\n      try { \n        setIsLoading(true)\n        const data = await fetchMovieComments(movieId)\n        setComments(data.results);\n        setIsSuccess(true)\n      } catch (error) {\n        toast.error(error.message)\n        setIsLoading(false)\n        setIsSuccess(false)\n      } finally {\n        setIsLoading(false)\n      }\n    }\n    \n    fetchData(movieId);\n  }, [movieId])\n\n  return (\n    <StyledList>\n      {comments.length > 0 & isSuccess ? comments.slice(0, 5).map(comment => {\n        return <CommentItem key={comment.id} comment={comment} />\n      }) : ''}\n      {isSuccess & comments.length === 0 ? 'This movie has no comments yet.' : ''}\n      {isLoading && <Loader/>}\n    </StyledList>\n  )\n}\n\nexport default Comments"],"names":["StyledList","styled","_templateObject","_taggedTemplateLiteral","_useState","useState","_useState2","_slicedToArray","comments","setComments","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","isSuccess","setIsSuccess","movieId","useParams","useEffect","fetchData","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","data","_context","prev","next","fetchMovieComments","sent","results","t0","toast","message","finish","stop","apply","arguments","_jsxs","children","length","slice","map","comment","_jsx","CommentItem","id","Loader"],"sourceRoot":""}