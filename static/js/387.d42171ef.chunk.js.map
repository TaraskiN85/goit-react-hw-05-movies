{"version":3,"file":"static/js/387.d42171ef.chunk.js","mappings":"2RAEaA,E,OAAgBC,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,+F,SCuCvC,EA/Ba,WACX,IAAAC,GAAkCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAvCI,EAASF,EAAA,GAAEG,EAAYH,EAAA,GAC9BI,GAAkCL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAExBG,GAAUC,EAAAA,EAAAA,MAAYD,QAkB5B,OAhBAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAF,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEI,OAFJF,EAAAC,KAAA,EAEdX,GAAa,GAAKU,EAAAE,KAAA,GACCC,EAAAA,EAAAA,IAAeZ,GAAQ,OAApCQ,EAAIC,EAAAI,KACZlB,EAAaa,EAAKM,MAAML,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAM,GAAAN,EAAA,SAEtBV,GAAa,GACbiB,EAAAA,GAAAA,MAAYP,EAAAM,GAAME,SAAQ,QAEP,OAFOR,EAAAC,KAAA,GAE1BX,GAAa,GAAMU,EAAAS,OAAA,6BAAAT,EAAAU,OAAA,GAAAZ,EAAA,wBAEtB,kBAXc,OAAAH,EAAAgB,MAAA,KAAAC,UAAA,KAYflB,EAAUH,EACZ,GAAG,CAACA,KAGFsB,EAAAA,EAAAA,MAACpC,EAAa,CAAAqC,SAAA,CACX7B,EAAU8B,OAAS,GAAK9B,EAAU+B,QAAO,SAAAC,GAAK,OAA2B,OAAvBA,EAAMC,YAAqB,IAAEC,MAAM,EAAG,IAAIC,KAAI,SAAAH,GAC/F,OAAOI,EAAAA,EAAAA,KAACC,EAAAA,GAAS,CAAkBL,MAAOA,GAAnBA,EAAMM,KAC/B,IACClC,IAAagC,EAAAA,EAAAA,KAACG,EAAAA,EAAM,MAE3B,C","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastContainer = styled.div`\n  width: 100%;\n  height: auto;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 30px;\n`;\n","import React, { useEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\n\nimport { ActorCard } from 'components';\nimport { fetchMovieCast } from 'services/api';\nimport { Loader } from 'helpers/Loader/Loader';\n\nimport { CastContainer } from './Cast.styled';\n\nconst Cast = () => {\n  const [movieCast, setMovieCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false)\n\n  const movieId = useParams().movieId;\n  \n  useEffect(() => {\n    const fetchData = async () => {\n      try { \n        setIsLoading(true)\n        const data = await fetchMovieCast(movieId)\n      setMovieCast(data.cast);\n      } catch (error) {\n        setIsLoading(false)\n        toast.error(error.message)\n      } finally {\n        setIsLoading(false)\n      }\n    }\n    fetchData(movieId);\n  }, [movieId])\n\n  return (\n    <CastContainer>\n      {movieCast.length > 0 && movieCast.filter(actor => actor.profile_path !== null).slice(0, 15).map(actor => {\n        return <ActorCard key={actor.name} actor={actor} />\n      })}\n      {isLoading && <Loader/>}\n    </CastContainer>)\n}\n\nexport default Cast"],"names":["CastContainer","styled","_templateObject","_taggedTemplateLiteral","_useState","useState","_useState2","_slicedToArray","movieCast","setMovieCast","_useState3","_useState4","isLoading","setIsLoading","movieId","useParams","useEffect","fetchData","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","data","_context","prev","next","fetchMovieCast","sent","cast","t0","toast","message","finish","stop","apply","arguments","_jsxs","children","length","filter","actor","profile_path","slice","map","_jsx","ActorCard","name","Loader"],"sourceRoot":""}