{"version":3,"file":"static/js/887.aac1357e.chunk.js","mappings":"oRAEaA,EAAgBC,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,2R,SCI1BC,EAAY,SAAHC,GAAmB,IAAbC,EAAKD,EAALC,MAClBC,EAAiDD,EAAjDC,KAAMC,EAA2CF,EAA3CE,aAAcC,EAA6BH,EAA7BG,cAAeC,EAAcJ,EAAdI,UAC3C,OACIC,EAAAA,EAAAA,MAACX,EAAa,CAAAY,SAAA,EACZC,EAAAA,EAAAA,KAAA,OAAKC,IAAG,GAAAC,OAAKC,EAAAA,IAAUD,OAAGP,GAAgBS,IAAG,GAAAF,OAAKN,MAClDI,EAAAA,EAAAA,KAAA,MAAAD,SAAKL,KACLM,EAAAA,EAAAA,KAAA,MAAAD,SAAKF,MAGb,E,SCbaQ,EAAgBjB,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,+FCuCvC,EA/Ba,WACX,IAAAgB,GAAkCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAvCI,EAASF,EAAA,GAAEG,EAAYH,EAAA,GAC9BI,GAAkCL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAExBG,GAAUC,EAAAA,EAAAA,MAAYD,QAkB5B,OAhBAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,eAAA3B,GAAA4B,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAF,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEI,OAFJF,EAAAC,KAAA,EAEdV,GAAa,GAAKS,EAAAE,KAAA,GACCC,EAAAA,EAAAA,IAAeX,GAAQ,OAApCO,EAAIC,EAAAI,KACZjB,EAAaY,EAAKM,MAAML,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAM,GAAAN,EAAA,SAEtBT,GAAa,GACbgB,EAAAA,GAAAA,MAAYP,EAAAM,GAAME,SAAQ,QAEP,OAFOR,EAAAC,KAAA,GAE1BV,GAAa,GAAMS,EAAAS,OAAA,6BAAAT,EAAAU,OAAA,GAAAZ,EAAA,wBAEtB,kBAXc,OAAA9B,EAAA2C,MAAA,KAAAC,UAAA,KAYfjB,EAAUH,EACZ,GAAG,CAACA,KAGFlB,EAAAA,EAAAA,MAACO,EAAa,CAAAN,SAAA,CACXW,EAAU2B,OAAS,GAAK3B,EAAU4B,QAAO,SAAA7C,GAAK,OAA2B,OAAvBA,EAAME,YAAqB,IAAE4C,MAAM,EAAG,IAAIC,KAAI,SAAA/C,GAC/F,OAAOO,EAAAA,EAAAA,KAACT,EAAS,CAAkBE,MAAOA,GAAnBA,EAAMC,KAC/B,IACCoB,IAAad,EAAAA,EAAAA,KAACyC,EAAAA,EAAM,MAE3B,C","sources":["components/ActorCard/ActorCard.styled.js","components/ActorCard/ActorCard.jsx","components/Cast/Cast.styled.js","components/Cast/Cast.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CardContainer = styled.div`\n  height: auto;\n  width: calc((100% - 150px) / 5);\n  display: flex;\n  flex-direction: column;\n  text-align: center;\n  margin-bottom: 24px;\n\n  > h4 {\n    font-size: 28px;\n    font-weight: 500;\n    padding-bottom: 12px;\n  }\n\n  > h5 {\n    font-size: 24px;\n  }\n`;\n","import React from 'react'\n\nimport { POSTER_URL } from 'services/api';\n\nimport { CardContainer } from './ActorCard.styled';\n\nexport const ActorCard = ({ actor }) => {\n  const { name, profile_path, original_name, character } = actor;\n  return (\n      <CardContainer>\n        <img src={`${POSTER_URL}${profile_path}`} alt={`${original_name}`} />\n        <h4>{name}</h4>\n        <h5>{character}</h5>\n      </CardContainer>\n    )\n}\n","import styled from 'styled-components';\n\nexport const CastContainer = styled.div`\n  width: 100%;\n  height: auto;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 30px;\n`;\n","import React, { useEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\n\nimport { ActorCard } from 'components/ActorCard/ActorCard';\nimport { fetchMovieCast } from 'services/api';\nimport { Loader } from 'helpers/Loader/Loader';\n\nimport { CastContainer } from './Cast.styled';\n\nconst Cast = () => {\n  const [movieCast, setMovieCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false)\n\n  const movieId = useParams().movieId;\n  \n  useEffect(() => {\n    const fetchData = async () => {\n      try { \n        setIsLoading(true)\n        const data = await fetchMovieCast(movieId)\n      setMovieCast(data.cast);\n      } catch (error) {\n        setIsLoading(false)\n        toast.error(error.message)\n      } finally {\n        setIsLoading(false)\n      }\n    }\n    fetchData(movieId);\n  }, [movieId])\n\n  return (\n    <CastContainer>\n      {movieCast.length > 0 && movieCast.filter(actor => actor.profile_path !== null).slice(0, 15).map(actor => {\n        return <ActorCard key={actor.name} actor={actor} />\n      })}\n      {isLoading && <Loader/>}\n    </CastContainer>)\n}\n\nexport default Cast"],"names":["CardContainer","styled","_templateObject","_taggedTemplateLiteral","ActorCard","_ref","actor","name","profile_path","original_name","character","_jsxs","children","_jsx","src","concat","POSTER_URL","alt","CastContainer","_useState","useState","_useState2","_slicedToArray","movieCast","setMovieCast","_useState3","_useState4","isLoading","setIsLoading","movieId","useParams","useEffect","fetchData","_asyncToGenerator","_regeneratorRuntime","_callee","data","_context","prev","next","fetchMovieCast","sent","cast","t0","toast","message","finish","stop","apply","arguments","length","filter","slice","map","Loader"],"sourceRoot":""}